name: Multi-Platform Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          # Windows builds
          - os: windows
            arch: amd64
            runner: windows-latest
            goos: windows
            goarch: amd64
            binary_suffix: .exe
          - os: windows
            arch: arm64
            runner: windows-latest
            goos: windows
            goarch: arm64
            binary_suffix: .exe
          - os: windows
            arch: 386
            runner: windows-latest
            goos: windows
            goarch: 386
            binary_suffix: .exe
          
          # Linux builds
          - os: linux
            arch: amd64
            runner: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_suffix: ""
          - os: linux
            arch: arm64
            runner: ubuntu-latest
            goos: linux
            goarch: arm64
            binary_suffix: ""
          - os: linux
            arch: 386
            runner: ubuntu-latest
            goos: linux
            goarch: 386
            binary_suffix: ""

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      if: matrix.arch == 'amd64'  # Only run tests on amd64 to save time
      run: go test -v ./...

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        go build -ldflags="-s -w -X main.version=${{ github.ref_name }}" -o minecraft-mod-classifier-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.binary_suffix }} .

    - name: Create release directory
      run: mkdir -p release

    - name: Copy binary to release directory
      shell: bash
      run: |
        cp minecraft-mod-classifier-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.binary_suffix }} release/

    - name: Copy assets
      shell: bash
      run: |
        if [ -d "assets" ]; then
          cp -r assets release/
        fi
        if [ -f "assets/mods-data.json" ]; then
          cp assets/mods-data.json release/
        fi

    - name: Copy additional files
      shell: bash
      run: |
        # Copy README, LICENSE, and other important files
        for file in README.md LICENSE* CHANGELOG* config.* *.yml *.yaml; do
          if [ -f "$file" ]; then
            cp "$file" release/
          fi
        done

    - name: Create archive (Windows)
      if: matrix.os == 'windows'
      run: |
        cd release
        7z a -tzip ../minecraft-mod-classifier-${{ matrix.os }}-${{ matrix.arch }}.zip *

    - name: Create archive (Linux)
      if: matrix.os == 'linux'
      run: |
        cd release
        tar -czf ../minecraft-mod-classifier-${{ matrix.os }}-${{ matrix.arch }}.tar.gz *

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: minecraft-mod-classifier-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          minecraft-mod-classifier-${{ matrix.os }}-${{ matrix.arch }}.*
        retention-days: 7

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/minecraft-mod-classifier-windows-amd64/minecraft-mod-classifier-windows-amd64.zip
          artifacts/minecraft-mod-classifier-windows-arm64/minecraft-mod-classifier-windows-arm64.zip
          artifacts/minecraft-mod-classifier-windows-386/minecraft-mod-classifier-windows-386.zip
          artifacts/minecraft-mod-classifier-linux-amd64/minecraft-mod-classifier-linux-amd64.tar.gz
          artifacts/minecraft-mod-classifier-linux-arm64/minecraft-mod-classifier-linux-arm64.tar.gz
          artifacts/minecraft-mod-classifier-linux-386/minecraft-mod-classifier-linux-386.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'


    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...